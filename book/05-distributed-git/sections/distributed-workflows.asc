=== Разпределени работни процеси

(((workflows)))
За разлика от централизираните Version Control Systems (CVCSs), разпределената натура на Git позволява по-голяма гъвкавост по отношение на това как разработчиците сътрудничат в проектите.
В централизираните системи всеки разработчик е нещо като възел работещ повече или по-малко с един централен хъб.
В Git обаче, всеки разработчик може потенциално да бъде и хъб и възел – това значи, че може както да сътрудничи в други хранилища, така и да поддържа свое собствено публично такова, на което негови колеги да базират работата си и да сътрудничат.
Това отваря доста възможности за структуриране на работните процеси за проекта и/или екипа, така че ще разгледаме някои познати парадигми, които съществуват благодарение на тази гъвкавост.
Ще погледнем силните и слаби страни на всеки дизайн, а вие може да изберете един от тях или да смесвате възможности от различни такива.

==== Централизиран работен процес

(((workflows, centralized)))
В централизираните системи съществува единичен модел за съвместна работа – централизираният работен процес.
Един централен хъб, _хранилище_, може да приема код и всеки трябва да синхронизира работата си с него.
Множеството разработчици са възлите, консуматорите в този хъб и те трябва да се синхронизират с неговия статус.

.Централизиран работен процес
image::images/centralized_workflow.png[Централизиран работен процес]

Това ще рече, че ако двама души клонират от централното хранилище и направят промени, то само първият от тях, който изпрати обратно промените си, ще може да направи това без проблем.
Закъснелият разработчик ще трябва първо да слее при себе си работата на първия си колега, преди да публикува своите промени - така първите направени промени не се презаписват.
Тази концепция работи както при Git, така и при Subversion(((Subversion))) (или всяка друга CVCS).

Ако вече се чувствате в свои води с този стил на работа във вашата компания или екип, можете лесно да продължите да го следвате и с Git.
Просто направете единично хранилище и дайте на всеки от екипа си push достъп; Git няма да позволи на колегите да се презаписват един друг.

Да кажем, че John и Jessica започват да работят едновременно.
John завършва промените си и ги изпраща към сървъра.
След това Jessica опитва да публикува своите, но сървърът отказва това.
Тя ще бъде уведомена, че се опитва да публикува non-fast-forward промени и че няма да може да го направи докато първо не изтегли и слее работата на John.
Този работен процес е популярен, защото следва познати на много хора парадигми на работа.

Освен това не е ограничен до малки екипи.
С модела за разклоняване на Git е възможно стотици разработчици успешно да работят едновременно по единичен проект през множество различни клонове код.

[[_integration_manager]]
==== Integration-Manager работен процес

(((workflows, integration manager)))
Понеже Git позволява да имате множество отдалечени хранилища, възможно е да имате работен процес, при който всеки разработчик има достъп за писане до собственото си публично хранилище и достъп само за четене до всички останали.
Този сценарий често включва canonical хранилище, което представлява "`официалния`" проект.
За да сътрудничите в него, вие създавате собствено публично негово копие и публикувате промените си в него.
След това, можете да изпратите заявка до собственика на canonical проекта за интегриране на вашите промени.
Тогава този автор може да добави вашето хранилище като свое отдалечено такова, да тества локално промените ви, да ги слее в собствен клон и накрая да ги публикува в публичното хранилище така че да са достъпни за всички.
Процесът работи така (вижте <<wfdiag_b>>):

1.  Поддържащият проекта изпраща промени в публично хранилище.
2.  Сътрудник клонира хранилището и прави собствени промени по него.
3.  Сътрудникът публикува промените си в собственото си публично копие.
4.  Сътрудникът изпраща на поддържащия проекта съобщение със заявка за интегриране на промените.
5.  Поддържащият проекта добавя хранилището на сътрудника като отдалечено, издърпва и слива промените локално при себе си.
6.  Поддържащият проекта публикува слетите промени обратно в главното хранилище.

[[wfdiag_b]]
.Integration-manager работен процес
image::images/integration-manager.png[Integration-manager работен процес]

(((forking)))
Това е доста разпространен начин на работа в хъб-базираните платформи като GitHub или Gitlab, където е лесно да клонирате проект и да публикувате промените си в него така, че всички да ги виждат.
Едно от най-съществените предимства на този подход е, че позволява да продължите работата си, а поддържащият централното хранилище може да интегрира промените ви по всяко време.
Сътрудниците не е нужно да чакат промените им да бъдат интегрирани – всяка страна може да работи със собствени темпове.

==== Dictator and Lieutenants работен процес

(((workflows, dictator and lieutenants)))
Това е вариант на работа с множество хранилища.
Обикновено се използва в проекти от много голям мащаб, със стотици сътрудници; един пример за такъв е ядрото на Linux.
Различни интегриращи мениджъри се грижат за определени части от хранилището; те се наричат _лейтенанти_.
Всеки от лейтенантите има един интегриращ мениджър, известен като благосклонен диктатор (benevolent dictator).
Този диктатор публикува код от собствена директория към референтно хранилище, от което всички сътрудници трябва да теглят.
Процесът работи така (вижте <<wfdiag_c>>):

1.  Обикновените разработчици работят по своя topic клон и пребазират работата си върху `master`.
     `master` клонът е този от референтното хранилище, към което диктаторът публикува.
2.  Лейтенантите сливат topic клоновете на разработчиците в своя `master` клон.
3.  Диктаторът слива `master` клоновете на лейтенантите в своя `master` клон.
4.  Накрая, диктаторът изпраща този `master` клон към референтното хранилище, така че разработчиците могат да се пребазират по него.

[[wfdiag_c]]
.Benevolent dictator работен процес
image::images/benevolent-dictator.png[Benevolent dictator работен процес]

Този процес на работа се ползва рядко, но може да е полезен в много големи проекти или в йерархични работни среди.
Той позволява на лидера на проекта (диктатора) да делегира повече работа и да събира големи подмножества от код от много локации преди да ги интегрира.

[[_patterns_for_managing_source_code_branches]]
==== Patterns for Managing Source Code Branches

[NOTE]
====
Martin Fowler е автор на ръководството "Patterns for Managing Source Code Branches".
То обхваща всички популярни работни процеси в Git и обяснява как и кога да се използват.
Налична е и глава сравняваща high и low integration frequencies.

https://martinfowler.com/articles/branching-patterns.html[^]
====

==== Обобщение

Това са част от популярните работни процеси, които могат да се реализират с разпределена система като Git, но може да видите, че са възможни голям брой варианти, които да съответстват на вашата специфична работна среда.
Сега, след като (надяваме се) можете да изберете варианта, който е най-подходящ за вас, ще разгледаме някои по-специфични примери за това как да изпълняваме основните роли, които съставляват тези работни процеси.
В следващата секция ще посочим няколко основни правила за това как да сътрудничим в проект.

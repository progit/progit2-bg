=== Smart HTTP

(((serving repositories, HTTP)))
Вече имаме автентикиран достъп през SSH и неавтентикиран през `git://` протокола, но съществува и протокол, който може да прави и двете едновременно.
Процесът по настройка на Smart HTTP всъщност се свежда до разрешаването на CGI скрипт, който идва с Git и е известен като `git-http-backend` на сървъра.(((git commands, "http-backend")))
Този скрипт ще чете пътя и хедърите изпратени от `git fetch` или `git push` към HTTP URL и ще разбере дали клиентът може да комуникира през http (което е така за всеки клиент след версия 1.6.6).
Ако CGI скриптът види, че клиентът е смарт, той ще комуникира с него по интелигентен начин. В противен случай, ще се върне към по-опростения способ (така че да е обратно съвместим с по-старите клиенти).

Нека минем през съвсем простата настройка.
Ще използваме Apache като CGI сървър.
Ако нямате настроен Apache, можете да го направите в Linux система приблизително така:(((Apache)))

[source,console]
----
$ sudo apt-get install apache2 apache2-utils
$ a2enmod cgi alias env
----

Това ще разреши модулите `mod_cgi`, `mod_alias`, и `mod_env`, които са необходими за нашите цели.

Ще трябва също така да промените групата на директориите в `/srv/git` на `www-data`, така че уеб сървърът да има права за четене и писане в хранилищата, защото инстанцията на Apache, която ще изпълнява CGI скрипта, ще работи по подразбиране като този потребител:

[source,console]
----
$ chgrp -R www-data /srv/git
----

След това трябва да променим някои неща по конфигурацията на Apache, така че да използва `git-http-backend` скрипта като средство за обработка на всички заявки, идващи в `/git` пътя на уеб сървъра.

[source,console]
----
SetEnv GIT_PROJECT_ROOT /srv/git
SetEnv GIT_HTTP_EXPORT_ALL
ScriptAlias /git/ /usr/lib/git-core/git-http-backend/
----

Ако оставите променливата `GIT_HTTP_EXPORT_ALL`, тогава Git ще допуска неавтентикираните потребители само до хранилищата, съдържащи файла `git-daemon-export-ok` - точно както го прави и Git демона.

Накрая, ще искаме да накараме Apache да позволява заявки от автентикирани потребители с права на запис към `git-http-backend` с блок подобен на следния:

[source,console]
----
<Files "git-http-backend">
    AuthType Basic
    AuthName "Git Access"
    AuthUserFile /srv/git/.htpasswd
    Require expr !(%{QUERY_STRING} -strmatch '*service=git-receive-pack*' || %{REQUEST_URI} =~ m#/git-receive-pack$#)
    Require valid-user
</Files>
----

Това значи, че трябва да създадете `.htpasswd` файл, съдържащ паролите за всички валидни потребители.
Ето пример за добавен потребител "`schacon`" в такъв файл:

[source,console]
----
$ htpasswd -c /srv/git/.htpasswd schacon
----

Има много различни начини да накарате Apache да автентикира потребители, просто трябва да изберете подходящия за вас.
Тук просто посочихме един от най-простите варианти.
Вероятно също ще искате да настроите достъп през SSL, така че комуникацията да е криптирана.

Няма да навлизаме по-навътре в конфигурационните детайли на Apache, тъй като може да използвате различни похвати за автентикация или изцяло различен уеб сървър.
Идеята е, че Git идва с CGI скрипт наречен `git-http-backend`, който когато бъде извикан, ще поеме цялата комуникация по приемането и изпращането на данни през HTTP.
Самият скрипт не извършва сам по себе си никаква автентикация, но това може лесно да бъде контролирано при уеб сървъра, който го извиква.
Можете да го използвате почти с всеки CGI уеб сървър, така че изберете този, който предпочитате.

[NOTE]
====
За повече информация за настройка на Apache, вижте документацията тук: https://httpd.apache.org/docs/current/howto/auth.html[^]
====

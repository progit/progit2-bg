=== GitLab

(((serving repositories, GitLab)))(((GitLab)))
GitWeb е доста семпъл вариант за визуализация.
Ако търсите по-модерен, напълно функционален Git сървър, съществуват няколко проекта с отворен код, които са на ваше разположение.
Понеже GitLab е един от най-популярните, ще разгледаме него за пример.
Това е малко по-сложно от GitWeb и вероятно ще изисква повече поддръжка, но е и много по-пълноценна алтернатива.

==== Инсталация

GitLab е уеб приложение използващо база данни, така че инсталацията му изисква малко повече усилия сравнена с някои други Git сървъри.
За щастие, този процес е много добре документиран и проектът активно се поддържа.
GitLab горещо препоръчва инсталирането на сървъра ви да се прави през официалния Omnibus GitLab пакет.

Другите опции за инсталиране са:

* GitLab Helm chart, за ползване с Kubernetes.
* Dockerized GitLab пакети за използване с Docker.
* От сорс-файлове.
* От облачен доставчик като AWS, Google Cloud Platform, Azure, OpenShift и Digital Ocean.

За повече информация прочетете https://gitlab.com/gitlab-org/gitlab-foss/-/blob/master/README.md[GitLab Community Edition (CE) ръководството].

==== Администрация

Административният интерфейс на GitLab е достъпен през браузър.
Отворете страницата на IP адреса на машината, на която е инсталиран GitLab и се логнете като администратор.
Фабричното потребителско име е `admin@local.host`, а паролата `5iveL!fe` (ще бъдете помолени да я промените веднага след входа).
След това натиснете иконата "`Admin area`" в менюто в горния десен край.

[[gitlab_menu]]
.Елементът "`Admin area`" в менюто на GitLab
image::images/gitlab-menu.png[“Admin area” елемента в менюто на GitLab]

===== Потребители

Потребителите в GitLab са акаунти, които съответстват на хора.
Самите акаунти не са сложни; в основни линии представляват колекция от персонални данни прикачени към логин информацията.
Всеки потребителски акаунт притежава *namespace*, за логическо групиране на проектите, които притежава.
Така, ако потребител с име +jane+ има проект с име +project+, то този проект ще е с url `http://server/jane/project`.

[[gitlab_users]]
.Административният екран на GitLab за управление на потребители
image::images/gitlab-users.png[Административният екран на GitLab за управление на потребители]

Изтриването на потребител може да стане по два начина:
"`Блокирането`" на потребител забранява логването му в GitLab инстанцията, но всички данни в съответния namespace ще бъдат запазени и всички къмити подписани с имейл адреса на този потребител ще сочат все още към съответния потребителски профил.

"`Изтриването`" от своя страна, тотално унищожава потребителя от базата данни и файловата система.
Всички проекти и данните в съответния namespace се изтриват и всички групи, които потребителят притежава, също се изтриват.
Очевидно тази втора опция е много по-деструктивна и се използва рядко.

[[_gitlab_groups_section]]
===== Групи

GitLab групата представлява съвкупност от проекти плюс информация за това как потребителите имат достъп до тях.
Всяка група има namespace за проектите (по същия начин като потребителите), така че ако групата +training+ съдържа проект +materials+, то неговият url ще бъде `http://server/training/materials`.

[[gitlab_groups]]
.Административният екран за групите в GitLab
image::images/gitlab-groups.png[Административният екран за групите в GitLab]

Всяка група е асоциирана с множество потребители, всеки от които разполага с ниво на достъп до групата и проектите в нея.
То варира от "`Guest`" (с достъп до issues и chat) до "`Owner`" (пълен контрол над групата, членовете ѝ и нейните проекти).
Типовете права са твърде много, за да ги изброяваме всичките, но GitLab има полезни линкове за помощ в административния интерфейс.

===== Проекти

Един GitLab проект приблизително съответства на единично Git хранилище.
Всеки проект принадлежи на един namespace, потребителски или на група.
Ако проектът принадлежи на потребител, то този потребител има пряк контрол върху това кой ще има достъп до него; ако е в група, то тогава user-level правата на групата ще се приложат съответно.

Всеки проект има също така ниво на видимост, което контролира кой има права за четене на страниците и хранилището му.
Ако един проект е _Private_, то собственикът му трябва изрично да даде права за достъп на него до потребителите, които пожелае да го виждат.
_Internal_ проектите са видими за всеки логнат потребител, а _Public_ проектите са видими за всички.
Това контролира както `git fetch` достъпа, така и достъпа до уеб UI интерфейса за този проект.

===== Hooks

GitLab подържа hooks като способ за сигнализация, на ниво проект и система.
За всеки от тях, GitLab сървърът ще направи HTTP POST заявка с описателна JSON-фирматирана информация, когато възникнат съответните събития.
Това е полезен начин да свържете вашите Git хранилища и GitLab инстанцията си към останалата част от автоматизацията на разработките като например CI сървъри, чат стаи или deployment инструменти.

==== Използване

Вероятно най-напред ще искате да създадете GitLab проект.
Това се прави чрез иконата "`+`" на лентата с инструменти.
Ще трябва да въведете име за проекта, към кой namespace ще принадлежи той и какво ниво на видимост ще има.
Повечето от тези неща не са перманентни и могат да се редактират по-късно.
Натиснете "`Create Project`" и сте готови.

След като проектът съществува, вероятно ще искате да го свържете с локално Git хранилище.
Всеки проект е достъпен през HTTPS или SSH и всеки от тези протоколи може да се използва като Git remote.
Адресите са видими в горната част на страницата на проекта.
В налично локално Git хранилище, тази команда ще създаде отдалечена референция с име `gitlab` към хостваната локация:

[source,console]
----
$ git remote add gitlab https://server/namespace/project.git
----

Ако нямате локално копие на хранилището, може просто да изпълните:

[source,console]
----
$ git clone https://server/namespace/project.git
----

Уеб интерфейсът осигурява достъп до множество удобни изгледи на самото хранилище.
Домашната страница на всеки проект показва последната активност и линковете в горната част ще ви преведат до изгледи на файловете в проекта и историята на къмитите.

==== Съвместна работа

Най-простият начин за съвместна работа в GitLab е да дадете на друг потребител директно push права за достъп до Git хранилището ви.
Можете да добавите потребител към проекта от секцията "`Members`" в настройките на проекта, където може да асоциирате и ниво на достъп за него (различните нива на достъп се разглеждат по-подробно в <<_gitlab_groups_section>>).
Давайки на потребителя ниво "`Developer`" или по-високо, вие му позволявате свободно да изпраща къмити и клонове директно в хранилището.

Друг метод за колаборация е чрез използването на merge requests.
Тази функция позволява на всеки потребител, който вижда даден проект, да сътрудничи в него по контролиран начин.
Потребителите с директен достъп могат просто да създадат клон, да изпратят в него къмити и да отворят merge request от техния клон обратно в `master` или който и да е друг клон.
Потребителите без push права за дадено хранилище могат да го клонират при себе си ("`fork`"), да правят къмити в _това_ тяхно копие и да отворят merge request от него обратно към основния проект.
Този модел на работа позволява на собственика на проекта да има пълен контрол върху това какво и кога влиза в хранилището и едновременно с това да позволява сътрудничество от непознати потребители.

Merge requests и issues са основните обекти на дискусиите в GitLab.
Всеки merge request позволява line-by-line дискусия на предложената промяна (което поддържа олекотен вид code review), както и обща дискусионна нишка.
И двата обекта могат да се асоциират към потребители или да се организират в milestones.

Тази секция е фокусирана основно върху Git функциите на GitLab, но като един наистина зрял проект, той предлага много други възможности за съвместна работа на екипа ви като например множество wiki за проектите и инструменти за системна поддръжка.
Едно от предимствата на GitLab е в това, че веднъж настроен и пуснат, рядко ще ви се налага да променяте конфигурационен файл или да влизате в сървъра през SSH; повечето административни задачи се осъществяват през уеб интерфейса.

==== Bazaar
(((Bazaar)))(((Importing, from Bazaar)))

Bazaar е DVCS инструмент подобен на Git и е сравнително лесно да конвертирате Bazaar хранилище в Git такова.
За целта ви трябва плъгина `bzr-fastimport`.

===== Инсталация на bzr-fastimport плъгина

Процедурата е различна под UNIX операционни системи и Windows.
В първия случай, най-лесният начин е да се инсталира пакета `bzr-fastimport`, който ще си изтегли и всички необходими допълнителни изисквания.

Например, под Debian и дериватите му, може да използвате:

[source,console]
----
$ sudo apt-get install bzr-fastimport
----

С RHEL варианти командата е:

[source,console]
----
$ sudo yum install bzr-fastimport
----

При Fedora от версия 22 има нов пакетен мениджър, dnf:

[source,console]
----
$ sudo dnf install bzr-fastimport
----

Ако пакетът не е наличен, може да го инсталирате като плъгин:

[source,console]
----
$ mkdir --parents ~/.bazaar/plugins     # създава необходимите директории за плъгини
$ cd ~/.bazaar/plugins
$ bzr branch lp:bzr-fastimport fastimport   # импортира fastimport плъгина
$ cd fastimport
$ sudo python setup.py install --record=files.txt   # инсталира плъгина
----

За да работи този плъгин, ще ви трябва също и `fastimport` модула за Python.
Може да проверите дали е наличен и, ако трябва да го инсталирате, така:

[source,console]
----
$ python -c "import fastimport"
Traceback (most recent call last):
  File "<string>", line 1, in <module>
ImportError: No module named fastimport
$ pip install fastimport
----

Ако не е наличен, можете да го изтеглите от https://pypi.python.org/pypi/fastimport/[^].

Под Windows, `bzr-fastimport` се инсталира автоматично със standalone версията и инсталацията по подразбиране (изберете всички чекбоксове).

На този етап начините за импортиране на Bazaar хранилище се различават според това дали имате само един клон или не.

===== Проект с единичен клон

Влезте в директорията, съдържаща Bazaar хранилището и инициализирайте Git хранилище:

[source,console]
----
$ cd /path/to/the/bzr/repository
$ git init
----

След това можете просто да експортирате Bazaar хранилището и да го конвертирате в Git така:

[source,console]
----
$ bzr fast-export --plain . | git fast-import
----

Според размера на проекта, процесът може да отнеме секунди или няколко минути.

===== Проект с главен клон и работен клон

Можете също да импортирате Bazaar хранилище съдържащо клонове.
Да кажем, че имате два клона: един главен (myProject.trunk) и един текущ (myProject.work).

[source,console]
----
$ ls
myProject.trunk myProject.work
----

Създайте Git хранилище и влезте в него:

[source,console]
----
$ git init git-repo
$ cd git-repo
----

Изтеглете `master` клона в Git:

[source,console]
----
$ bzr fast-export --export-marks=../marks.bzr ../myProject.trunk | \
git fast-import --export-marks=../marks.git
----

Направете същото и за работния клон:

[source,console]
----
$ bzr fast-export --marks=../marks.bzr --git-branch=work ../myProject.work | \
git fast-import --import-marks=../marks.git --export-marks=../marks.git
----

Сега `git branch` показва `master` и `work` клонове.
Проверете логовете за да се уверите, че те са изцяло импортирани и махнете файловете `marks.bzr` и `marks.git`.

===== Синхронизиране на индексната област

Колкото и клонове да имате и без значение от метода на импортиране, индексната ви област сега не е синхронизирана с `HEAD`. В случая при импортиране на повече от един клон, то това важи и за работната директория.
Ситуацията се разрешава лесно с командата:

[source,console]
----
$ git reset --hard HEAD
----

===== Игнориране на файловете от .bzrignore

Нека сега да видим каква е ситуацията с игнорирането на файлове.
Първото нещо за правене е да преименуваме `.bzrignore` в `.gitignore`.
Ако файлът `.bzrignore` съдържа един или повече редове започващи с "!!" или "RE:", ще трябва да го коригирате и може би дори да създадете няколко `.gitignore` файлове с цел да игнорирате точно същото съдържание като Bazaar.

Последно ще създадем къмит, който съдържа тези промени за миграцията:

[source,console]
----
$ git mv .bzrignore .gitignore
$ # modify .gitignore if needed
$ git commit -am 'Migration from Bazaar to Git'
----

===== Изпращане на хранилището към сървъра

Сега можем да публикуваме импортираното хранилище в новия му дом:

[source,console]
----
$ git remote add origin git@my-git-server:mygitrepository.git
$ git push origin --all
$ git push origin --tags
----

Новото Git хранилище е готово за ползване.

==== Git и Bazaar

Друга популярна DVCS система е http://bazaar.canonical.com/[Bazaar^].
Bazaar е безплатна система с отворен код, част от проекта https://www.gnu.org/[GNU Project^].
Тя работи по много различен начин от Git.
Понякога, за да направите едно и също нещо като в Git, ще трябва да използвате различна ключова дума и също така някои често използвани ключови думи нямат значението, което може би бихте очаквали.
По-специално, управлението на клонове е много различно и може да предизвика конфуз, особено сред Git потребителите.
Но въпреки всичко, да се работи с Bazaar хранилище от Git такова, е възможно.

Съществуват много проекти, които позволяват да използвате Git като Bazaar клиент.
Тук ще използваме проекта на Felipe Contreras, който можете да намерите на https://github.com/felipec/git-remote-bzr[^].
За да го инсталирате, трябва просто да свалите git-remote-bzr в папка от пътя ви:

[source,console]
----
$ wget https://raw.github.com/felipec/git-remote-bzr/master/git-remote-bzr -O ~/bin/git-remote-bzr
$ chmod +x ~/bin/git-remote-bzr
----

Ще ви трябва и инсталиран Bazaar.
Това е всичко.

===== Създаване на Git хранилище от Bazaar хранилище

Инструментът е лесен за ползване.
Достатъчно е да клонирате Bazaar хранилище като му дадете префикс `bzr::`.
Понеже Git и Bazaar правят пълно клониране върху локалния компютър, възможно е да прикачите Git копие към локалното ви Bazaar копие на хранилище, въпреки че това не е препоръчително.
Много по-лесно е да закачите вашето Git копие към същото място, към което е закачено Bazaar копието -- към централното хранилище.

Приемаме, че работим с отдалечено хранилище на адрес `bzr+ssh://developer@mybazaarserver:myproject`.
Клонираме го така:

[source,console]
----
$ git clone bzr::bzr+ssh://developer@mybazaarserver:myproject myProject-Git
$ cd myProject-Git
----

На този етап Git хранилището е създадено, но не е оптимизирано за ефективно използване на диска.
Ето защо е хубаво да почиствате и compact-вате вашите Git хранилища, особено ако са големи:

[source,console]
----
$ git gc --aggressive
----

===== Bazaar клонове

Bazaar позволява само да клонирате клонове, но едно хранилище може да има много такива и `git-remote-bzr` може да ги клонира всички.
Например, за да клонирате клон:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs/trunk emacs-trunk
----

За да клонирате цялото хранилище:

[source,console]
----
$ git clone bzr::bzr://bzr.savannah.gnu.org/emacs emacs
----

Втората команда прави копия на всички клонове в emacs хранилището, но е възможно да укажете и само някои от тях:

[source,console]
----
$ git config remote-bzr.branches 'trunk, xwindow'
----

Някои отдалечени хранилища не позволяват да показвате клоновете им и в такива случаи трябва да ги укажете ръчно. Въпреки, че можете да го направите в командата за клониране, това може да ви се стори по-лесно:

[source,console]
----
$ git init emacs
$ git remote add origin bzr::bzr://bzr.savannah.gnu.org/emacs
$ git config remote-bzr.branches 'trunk, xwindow'
$ git fetch
----

===== Игнориране с .bzrignore

Понеже работите по Bazaar-контролиран проект, не трябва да създавате `.gitignore` файл, защото _можете_ по невнимание да го включите в контрола и тогава другите хора работещи с Bazaar ще бъдат объркани.
Решението е да създадете `.git/info/exclude` файл като символна връзка или като нормален такъв.
По-късно ще видим как да се справим с това.

Bazaar използва същия модел за игнориране на файлове като Git, но в допълнение има две възможности без еквивалент в Git.
Пълното описание може да се намери в http://doc.bazaar.canonical.com/bzr.2.7/en/user-reference/ignore-help.html[документацията^].
Тези две възможности са:

1. "!!" позволява да игнорирате определени файлови маски дори ако те са указани с "!" правило.
2. "RE:" в началото на реда позволява да укажете като маска https://docs.python.org/3/library/re.html[Python регулярен израз^] (Git позволява само шел globs).

В резултат на това, възникват две различни ситуации:

1. Ако `.bzrignore` файлът не съдържа някой от двата префикса, тогава просто можете да направите символна връзка към него в хранилището: `ln -s .bzrignore .git/info/exclude`.
2. В противен случай, трябва да създадете файл `.git/info/exclude` и да го адаптирате така, че да игнорира същите файлове, които игнорира и `.bzrignore`.

Във всички случаи трябва да бъдете внимателни за всяка бъдеща промяна по `.bzrignore` за да сте сигурни, че `.git/info/exclude` винаги отразява коректно съдържанието му.
Ако `.bzrignore` се промени и се появят редове започващи с "!!" или "RE:", то Git няма да може да ги интерпретира и ще трябва да адаптирате вашия `.git/info/exclude` файл да прави същото като `.bzrignore`.
Освен това, ако `.git/info/exclude` преди това е бил символна връзка, първо ще трябва да я изтриете, да копирате `.bzrignore` в `.git/info/exclude` и да го редактирате за коректна адаптация.
Обаче, бъдете внимателни със създаването на файла, защото с Git не е възможно да включите повторно файл, ако родителската директория на този файл е изключена.

===== Издърпване на промени от отдалечено хранилище

За издърпване на промени се използват стандартните Git команди.
Подразбирайки, че промените ви са в `master` клона, вие сливате или пребазирате работата си върху `origin/master` клона:

[source,console]
----
$ git pull --rebase origin
----

===== Публикуване в отдалечено хранилище

Bazaar също като Git поддържа концепцията за merge къмити, така че няма да има проблем с публикуването на такива.
Можете спокойно да работите по отделен клон, да го слеете в `master` и след това да публикувате.
Създавате клонове, тествате и къмитвате както обикновено.
Накрая изпращате работата си в Bazaar хранилището:

[source,console]
----
$ git push origin master
----

===== Недостатъци

Remote helper-ите на Git си имат някои ограничения.
По-специално, следните команди не работят:

* git push origin :branch-to-delete (Bazaar не може да приема изтриване на референции по този начин)
* git push origin old:new (ще се публикува `old`)
* git push --dry-run origin branch (ще се направи действително публикуване)

===== Обобщение

Моделите на Git и Bazaar си приличат и по тази причина съвместната им работа не е толкова проблемна.
Стига да съблюдавате ограниченията и винаги да помните, че отдалеченото хранилище не е реално Git такова, не би следвало да срещате съществени трудности.

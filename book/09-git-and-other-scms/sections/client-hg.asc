==== Git и Mercurial

(((Interoperation with other VCSs, Mercurial)))
(((Mercurial)))
DVCS вселената не включва само Git.
В действителност, налични са много други системи, всяка от която със собствени възгледи за това как трябва да се прави разпределен version control.
Като изключим Git, най-популярната сред тях е Mercurial и двете са подобни в много аспекти.

Добрите новини са, че ако предпочитате да използвате Git локално, но се налага да работите по проект, чийто сорс код се контролира с Mercurial, съществува начин Git да функционира като клиент на Mercurial хранилища.
Понеже Git използва remotes за комуникация със сървърни хранилища, не е изненадващо, че въпросният бридж е имплементиран като remote helper.
Името на проекта е git-remote-hg, и може да се намери на https://github.com/felipec/git-remote-hg[^].

===== git-remote-hg

Първо, трябва да инсталираме git-remote-hg.
Практически това се изчерпва с копирането на файла някъде в пътя ви:

[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

…допускаме че `~/bin` е включен в пътищата на променливата `$PATH`.
Git-remote-hg има и още една друга зависимост: библиотеката `mercurial` за Python.
Ако имате инсталиран Python, това е лесно:

[source,console]
----
$ pip install mercurial
----

Ако нямате Python, посетете https://www.python.org/[^] и го инсталирайте преди това.

Последното нещо, от което се нуждаем, е Mercurial клиента.
Изтеглете го и го инсталирайте от https://www.mercurial-scm.org/[].

Сега сте готови за работа.
Имаме нужда от Mercurial хранилище, в което можем да публикуваме.
За късмет, всяко Mercurial хранилище може да работи по такъв начин, така че ще използваме стандартното "hello world", което всички използват за да учат Mercurial:

[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Начало

След като имаме подходящо "`server-side`" хранилище, можем да преминем през един стандартен работен процес.
Както ще видите, тези две системи са доста подобни и не би трябвало да имате големи трудности.

Както винаги с Git, първо клонираме:

[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Веднага забелязваме, че при работата с Mercurial хранилища се използва стандартната `git clone` команда.
Това е така, понеже git-remote-hg работи на сравнително ниско ниво, използвайки механизъм подобен на този, който Git използва за HTTP/S комуникация (remote helpers).
И Git и Mercurial са проектирани така, че всеки клиент да има пълно копие на историята на хранилището и тази команда ви осигурява цялостно клониране, включващо цялата история на проекта -- при това сравнително бързо.

Командата log показва два къмита, към последния от които сочи цял куп референции.
Оказва се, че някои от тях реално не са там.
Нека видим какво действително съдържа директорията `.git`:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

Git-remote-hg се опитва да прави нещата в стила на Git, но зад кулисите тя управлява концептуалното свързване между две леко различаващи се системи.
Директорията `refs/hg` съдържа действителните отдалечени референции.
Например, `refs/hg/origin/branches/default` е Git ref файл, който съдържа SHA-1 започваща с "`ac7955c`", което е къмита, към който сочи `master`.
По този начин `refs/hg` директорията е нещо като фалшива `refs/remotes/origin`, но също така може да различава bookmarks и branches.

Файлът `notes/hg` е изходната точка за това как git-remote-hg съотнася хешовете на Git къмитите с changeset идентификаторите на Mercurial.
Нека погледнем по-подробно:

[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

И така `refs/notes/hg` сочи към дърво, което в базата данни с обекти на Git е представено като списък от други обекти с имена.
`git ls-tree` отпечатва режима, типа, хеш стойността и името на файла за елементите в дървото.
Ако поразгледаме един от елементите на дървото, откриваме, че вътре има blob наречен "`ac9117f`" (SHA-1 хеша на къмита, към който сочи `master`), със съдържание "`0a04b98`" (което е ID-то на Mercurial changeset-а на върха на клона `default`). 

Добрата новина е, че почти не се налага да се занимаваме с всичко това.
Типичният работен процес няма да е много различен от този, при който работим с Git remote.

Трябва да обърнем внимание на още едно нещо преди да продължим, игнориранията.
Mercurial и Git използват много подобен механизъм за това, но е вероятно да не искате да публикувате `.gitignore` файл в Mercurial хранилище.
За щастие Git има начин да игнорира файлове, които са локални за хранилище на диска и форматът на Mercurial е съвместим с този на Git, така че просто трябва да копирате съответния файл:

[source,console]
----
$ cp .hgignore .git/info/exclude
----

Файлът `.git/info/exclude` работи точно като `.gitignore`, но не влиза в къмитите.

===== Работен процес

Да допуснем, че сме извършили някаква работа в проекта, имаме няколко къмита в клона `master` и сме готови да публикуваме промените.
Ето как изглежда хранилището ни сега:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Нашият `master` клон е с два къмита напред спрямо `origin/master`, но те са само на локалната машина.
Нека проверим дали някой друг не е публикувал някаква важна промяна междувременно:

[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Понеже използвахме флага `--all`, виждаме референциите "`notes`", които се използват вътрешно от git-remote-hg, можем да ги игнорираме.
Останалото е каквото се очаква; `origin/master` е обновен с един къмит и историята ни сега е разклонена (diverged).
За разлика от другите системи, които преглеждаме в тази глава, Mercurial може да обработва сливания, така че няма да се налага да правим нищо необичайно.

[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

Перфектно.
Пускаме си тестовете, те минават добре и сме готови да публикуваме промените си на сървъра:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

Това е всичко!
Ако погледнете Mercurial хранилището, ще видите че Push операцията е направила каквото се очаква:

[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

Changeset-ът с номер _2_ е създаден от Mercurial, а тези с номера _3_ и _4_ са направени от git-remote-hg, в резултат от публикуването на къмитите от Git.

===== Branches и Bookmarks

Git има само един вид клон: референция, която се премества с правенето на къмити.
В Mercurial, този тип референция се нарича "`bookmark,`" и тя се държи почти по същия начин като Git клон.

Концепцията на Mercurial за понятието "`branch`" е по-различна.
Клонът, върху който е създаден changeset се записва _с changeset-a_, което значи че той винаги ще бъде в историята на хранилището.
Ето пример за къмит направен в клона `develop`:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

Забележете реда, който започва с "`branch`".
Git не може в действителност да пресъздаде това (а и не се нуждае, и двата типа клонове могат да се представят като Git референции), но git-remote-hg трябва да разбира разликата, защото Mercurial ѝ обръща внимание.

Създаването на Mercurial bookmarks е лесно колкото създаването на Git клонове.
На Git страната:

[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

Това е всичко по въпроса.
От страната на Mercurial това изглежда така:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

Забележете новия таг `[featureA]` на revision 5.
Тези работят точно както Git клонове от страната на Git с едно изключение: не можете да изтриете bookmark от страната Git (това е ограничение на remote helpers).

Освен с Mercurial bookmarks, можете да работите и с "`heavyweight`" Mercurial клонове: просто ги създавате в `branches` namespace:

[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

Ето как ще изглежда това от страната на Mercurial:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

Името на клона "`permanent`" беше записано с changeset-а маркиран като _7_.

От гледна точка на Git, работата с тези два вида клонове е една и съща: превключвате, къмитвате, изтегляте, сливате и публикувате както нормално се прави в Git.
Нещо, което трябва да отбележим е, че Mercurial не поддържа презапис на историята, към нея може само да се добавя.
Ето как ще изглежда нашето Mercurial хранилище след интерактивно пребазиране последвано от force-push:

[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

Changeset-ите _8_, _9_, и _10_ са създадени и принадлежат към клона `permanent`, но старите changesets са все още там.
Това може да е *много* смущаващо за колегите ви използващи Mercurial, така че се старайте да го избягвате.


===== Mercurial обобщение

Git и Mercurial са много подобни, така че съвместната им работа е сравнително безболезнена.
Ако избягвате да преправяте историята, която публикувате (още веднъж, това е горещо препоръчително), може дори и да не разберете, че от другия край на връзката стои Mercurial система.

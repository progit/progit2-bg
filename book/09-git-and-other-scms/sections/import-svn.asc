==== Subversion

(((Subversion)))
(((Importing, from Subversion)))
Ако сте прочели секцията за използването на `git svn`, може да сте ползвали тези инструкции за да направите `git svn clone` към хранилище, след това да сте спрели да използвате Subversion сървъра, да сте публикували в нов Git сървър и да ползвате него занапред.
Ако искате историята, може да направите това толкова бързо колкото може да теглите от Subversion сървъра (което може да отнеме доста време).

Обаче, импортът не е перфектен и понеже може да отнеме време, няма да е лошо да го направите правилно.
Първият проблем е с информацията за автора.
В Subversion, всеки къмитващ автор има акаунт на сървъра, който се записва в къмит информацията.
Примерите в предишната секция показваха `schacon` в някои позиции, като наприме `blame` изхода и `git svn log`.
Ако искате да свържете тази информация с информацията за авторите в Git, ще ви трябва някакъв мапинг между Subversion потребителските акаунти и Git авторите.
Създайте файл `users.txt`, който прави мапинга така:

[source]
----
schacon = Scott Chacon <schacon@geemail.com>
selse = Someo Nelse <selse@geemail.com>
----

За да получите списък с имената на авторите, които SVN използва:

[source,console]
----
$ svn log --xml --quiet | grep author | sort -u | \
  perl -pe 's/.*>(.*?)<.*/$1 = /'
----

Това генерира лог изхода в XML формат, след това филтрира само редовете с author данни, премахва повторенията и изчиства XML таговете.
Очевидно това ще работи при налични `grep`, `sort`, и `perl`.
След това, пренасочете този изход във файла `users.txt`, така че да добавите еквивалентните Git потребителски данни във всеки ред.

[NOTE]
====
Ако пробвате това на Windows машина, ще срещнете проблем.
Microsoft предлага няколко добри съвета и примера на адрес https://docs.microsoft.com/en-us/azure/devops/repos/git/perform-migration-from-svn-to-git[^].
====

Може да подадете този файл на командата `git svn` за да я подпомогнете в по-акуратното мапване на данните за авторите.
Можете също да укажете на `git svn` да не включва метаданните, които Subversion нормално импортира с флага `--no-metadata` към командите `clone` или `init`.
Метаданните включват `git-svn-id` вграден във всяко къмит съобщение, което Git ще генерира по време на импорта.
Това може да задръсти вашия Git лог и да го направи по-неясен.

[NOTE]
====
Ще имате нужда от метаданните, ако искате да клонирате къмитите направени в Git хранилището обратно в оригиналното SVN такова.
Ако не желаете синхронизацията във вашия commit-лог, може спокойно да пропуснете параметъра `--no-metadata`.
====

Така командата `import` ще изглежда по следния начин:

[source,console]
----
$ git svn clone http://my-project.googlecode.com/svn/ \
      --authors-file=users.txt --no-metadata --prefix "" -s my_project
$ cd my_project
----

Сега ще имате по-красив Subversion импорт в директорията `my_project`.
Вместо къмити изглеждащи така:

[source]
----
commit 37efa680e8473b615de980fa935944215428a35a
Author: schacon <schacon@4c93b258-373f-11de-be05-5f7a86268029>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk

    git-svn-id: https://my-project.googlecode.com/svn/trunk@94 4c93b258-373f-11de-
    be05-5f7a86268029
----

те ще се показват като:

[source]
----
commit 03a8785f44c8ea5cdb0e8834b7c8e6c469be2ff2
Author: Scott Chacon <schacon@geemail.com>
Date:   Sun May 3 00:12:22 2009 +0000

    fixed install - go to trunk
----

Сега не само полето Author изглежда по-добре, но и `git-svn-id` информацията няма да се появява.

Бихте могли да направите и допълнително почистване след импорта.
Добре би било да махнете странните референции, които `git svn` настройва.
Първо ще преместите таговете, така че да бъдат реални тагове вместо странни отдалечени референции и след това ще преместите останалите клонове, така че да станат локални.

За да превърнете таговете в реални Git тагове, изпълнете:

[source,console]
----
$ for t in $(git for-each-ref --format='%(refname:short)' refs/remotes/tags); do git tag ${t/tags\//} $t && git branch -D -r $t; done
----

Това ще вземе референциите представляващи отдалечени клонове и започващи с `refs/remotes/tags/` и ще ги конвертира в реални олекотени тагове в Git.

След това, преместваме останалите референции от `refs/remotes` като локални клонове:

[source,console]
----
$ for b in $(git for-each-ref --format='%(refname:short)' refs/remotes); do git branch $b refs/remotes/$b && git branch -D -r $b; done
----

Може да се случи да видите някои допълнителни клонове със суфикс `@xxx` (където xxx е число), докато в Subversion виждате само един клон.
Това в действителност е Subversion функция наречена "`peg-revisions`", за която Git просто няма синтактичен аналог.
По тази причина `git svn` просто добавя svn version номера към името на клона точно по същия начин, по който бихте го написали в svn за да адресирате въпросния peg-revision в този клон.
Ако тези peg-revisions не ви интересуват, може просто да ги премахнете:

[source,console]
----
$ for p in $(git for-each-ref --format='%(refname:short)' | grep @); do git branch -D $p; done
----

Сега всички стари клонове са реални Git клонове и всички стари тагове са реални Git такива.

Има още едно последно нещо за коригиране.
За съжаление, `git svn` създава допълнителен клон с име `trunk`, който съответства на клона по подразбиране на Subversion, но указателят `trunk` сочи към същото място, към което и `master`.
Понеже `master` е нещото, с което сме свикнали с Git, ето как да премахнете допълнителния клон:

[source,console]
----
$ git branch -d trunk
----

Последно, добавяме нашия нов Git сървър като remote и публикуваме в него:

[source,console]
----
$ git remote add origin git@my-git-server:myrepository.git
----

Понеже искаме всичките ни клонове и тагове да се публикуват, можем да изпълним:

[source,console]
----
$ git push origin --all
$ git push origin --tags
----

Сега всичките клонове и тагове ще са в новия ни Git сървър в резултат на един подреден и изчистен импорт.

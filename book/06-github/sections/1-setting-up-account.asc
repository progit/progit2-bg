=== Създаване и настройка на акаунт

(((GitHub, user accounts)))
Първото нещо, което трябва да сторите, е да си създадете безплатен акаунт.
Просто отворете https://github.com[^], изберете си незаето потребителско име, посочете имейл адрес и парола и натиснете големия зелен бутон "`Sign up for GitHub`".

.Регистрационната форма на GitHub
image::images/signup.png[Регистрационната форма на GitHub.]

Следващото нещо, което ще видите, е страницата с платени планове - засега можете да я игнорирате.
GitHub ще ви изпрати имейл за потвърждение на подадения адрес.
Продължете и направете това, доста е важно (както ще видите по-късно).

[NOTE]
====
GitHub предоставя почти всичките си функции безплатно, с изключение на някои по-модерни екстри.

Платените планове на GitHub включват по-модерни инструменти и функции, както и увеличени лимити за безплатните услуги, но ние няма да се занимаваме с тях в тази книга.
Повече информация за наличните планове и сравнения между плановете може да намерите на https://github.com/pricing[^].
====

Щраквайки върху Octocat логото в горния ляв ъгъл на екрана, ще попаднете във вашата dashboard страница.
Вече можете да ползвате GitHub.

==== SSH достъп

(((SSH keys, with GitHub)))
В този момент, можете да се свързвате с хранилищата си по HTTPS с името и паролата, които създадохте при регистрацията.
Обаче, за просто клониране на публични проекти, те не са ви нужни - акаунтът, който създадохте влиза в действие когато правите огледални копия на хранилища (fork) и изпращате промени към тези копия по-късно.

Ако искате да използвате SSH отдалечени хранилища, ще трябва да конфигурирате публичен ключ.
Ако още нямате такъв, погледнете <<ch04-git-on-the-server#_generate_ssh_key>>.
Отворете настройките на акаунта през линка в горната дясна част на прозореца:

."`Account settings`" линк
image::images/account-settings.png[“Account settings” линк]

След това, изберете "`SSH keys`" секцията отляво.

."`SSH keys`" линк
image::images/ssh-keys.png[“SSH keys” линк]

Оттук, натиснете бутона "`Add an SSH key`", дайте описателно име на ключа, вмъкнете съдържанието на файла ви `~/.ssh/id_rsa.pub` (или както сте го кръстили) в text area полето и натиснете "`Add key`".

[NOTE]
====
Дайте име на SSH ключ, което се помни.
Можете да използвате имена като "My Laptop" или "Work Account", така че ако искате по-късно да изтриете даден ключ, да можете лесно да разберете кой е той всъщност.
====

[[_personal_avatar]]
==== Вашият аватар

След това, ако желаете, можете да замените генерирания автоматично аватар с изображение по ваш вкус.
Отворете секцията "`Profile`" (над SSH Keys) и натиснете "`Upload new picture`".

."`Profile`" линк
image::images/your-profile.png[“Profile” линк]

Ние сме избрали копие на Git логото на нашия диск и след това получаваме възможност да го изрежем.

.Изрязване на аватара
image::images/avatar-crop.png[Изрязване на аватара]

Сега всеки път, когато правите нещо в сайта, другите ще виждат аватара ви до потребителското име.

Ако сте качили аватар в популярната услуга Gravatar (често ползвана за Wordpress акаунти), то той ще бъде използван по подразбиране и няма нужда да минавате през тази стъпка.

==== Вашите имейл адреси

GitHub използва имейл адреса, за да асоциира Git къмитите с вашия потребител.
Ако използвате няколко адреса във вашите къмити и искате GitHub да ги свързва правилно, ще трябва да ги добавите всичките в Emails секцията на административния интерфейс.

[[_add_email_addresses]]
.Добавяне на имейл адреси
image::images/email-settings.png[Добавяне на имейл адреси]

В <<_add_email_addresses>> можем да видим някои от различните възможни статуси.
Най-горният адрес се верифицира и определя като основен такъв, което значи че ще бъде използван за получаване на нотификации.
Вторият адрес също се верифицира и може да бъде използван за основен, ако желаете да ги размените.
Последният адрес не се верифицира и не може да се използва като основен.
Ако GitHub види някой от тези адреси в къмит съобщенията в кое да е хранилище в сайта, то те ще бъдат асоциирани с вашия потребител.

==== Двустъпкова автентикация

Накрая, за допълнителна сигурност, определено е добре да настроите функцията за Two-factor Authentication или "`2FA`".
Двустъпковата автентикация е оторизационен механизъм, който е много популярен напоследък като средство за намаляване на риска от открадване на акаунта, в случай че някой разбере паролата ви.
Включването ѝ ще укаже на GitHub да изисква два различни метода за оторизиране на достъпа, така че ако единият от тях е компрометиран, атакуващият да не може да получи достъп до акаунта ви.

Можете да откриете настройките за Two-factor Authentication в секцията Security на Account settings.

.2FA в секцията Security
image::images/2fa-1.png[2FA в секцията Security]

Ако натиснете бутона "`Set up two-factor authentication`", ще се отвори конфигурационна страница, в която можете да изберете да използвате телефонно приложение за генериране на вторичен код за достъп ("`time based one-time password`"), или пък можете да укажете на GitHub да ви изпраща SMS с кода всеки път, когато се логвате.

След като изберете желания метод и изпълните инструкциите за настройка на 2FA, акаунтът ви ще бъде малко по-защитен и ще трябва да въведете код за достъп в допълнение към паролата си всеки път, когато се логвате в GitHub.

[[_getting_a_repo]]
=== Създаване на Git хранилище

Можете да се сдобиете с Git хранилище (repository) по два основни начина:

1. Първият от тях взема съществуващ проект/директория, който в момента не под контрол на версиите и го импортира в Git
2. Вторият _клонира_ съществуващо Git хранилище от друг сървър.

И в двата случая получавате Git хранилище на локалната си машина, готово за работа.

==== Инициализиране на хранилище в налична директория

Ако започвате да следите съществуващ проект, трябва да отидете в директорията му.
Ако никога не сте го правили, това изглежда различно според операционната система:

за Linux:
[source,console]
----
$ cd /home/user/my_project
----
за macOS:
[source,console]
----
$ cd /Users/user/my_project
----
за Windows:
[source,console]
----
$ cd C:/Users/user/my_project
----

и напишете:

[source,console]
----
$ git init
----

Това създава нова под-директория с име `.git`, която съдържа всичко необходимо, от което се нуждае Git -- нещо като скелет на хранилището.
В този момент - нищо от вашите файлове не се следи все още.
Вижте <<ch10-git-internals#ch10-git-internals>>> за повече информация какви точно файлове се съдържат в тази новосъздадена директория.)(((git commands, init)))

Ако желаете да започнете контрол на версиите на съществуващи файлове (вместо на празна директория), вероятно ще искате да започнете да следите файловете и да направите първоначален къмит.
Можете да направите това с малко `git add` команди, които указват файловете, които искате да следите, последвани от `git commit`:

[source,console]
----
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'
----

Ще се върнем на тези команди след малко.
В този момент, вие разполагате с готово Git хранилище със следящи се файлове и сте ги къмитнали за пръв път.

[[_git_cloning]]
==== Клониране на съществуващо хранилище

Ако искате да изтеглите копие от съществуващо Git хранилище -- например проект, в който желаете да сътрудничите, то командата която ви трябва е `git clone`.
Ако сте запознати с други VCS системи като например Subversion, веднага ще забележите разликата - командата е "clone", а не "checkout".
Това е важна разлика - вместо да издърпва просто работещо копие, Git получава пълно копие на почти всички данни, които сървърът пази.
Всяка версия на всеки файл от историята на проекта се издърпва по подразбиране когато изпълните `git clone`.
Практически, ако сървърът се повреди, можете често да използвате почти всеки от клоновете на всеки клиент за да го възстановите в състоянието му към момента, в който хранилището е било клонирано (може да загубите някои server-side специфични елементи, но цялата ви следяща се и значима информация ще е налична -- вижте <<ch04-git-on-the-server#_getting_git_on_a_server>> за повече подробности)

Хранилище се клонира с `git clone <url>`.(((git commands, clone)))
Например, ако искате да клонирате linkable библиотеката `libgit2`, можете да го направите така:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2
----

Командата ще създаде директория с име `libgit2`, ще инициализира `.git` под-директория, ще изтегли на компютъра ви всички данни от това хранилище и ще ви даде всички файлове от последната работеща версия.
Ако влезнете в новата папка `libgit2`, ще видите файловете вътре - готови за работа по тях.

Ако желаете клонирането да е в директория с различно от `libgit2` име - можете да го подадете като следващ параметър към командата:

[source,console]
----
$ git clone https://github.com/libgit2/libgit2 mylibgit
----

Тази команда прави същото като предишната, но в резултат ще ви даде директория с име `mylibgit`.

Git може да работи с различни протоколи за трансфер.
Предишният пример използва `https://`, но може да видите също и `git://` или `user@server:path/to/repo.git`, което използва SSH като транспортен протокол.
<<ch04-git-on-the-server#_getting_git_on_a_server>> ще разкаже повече за всички налични опции, които един сървър може да ползва за да предостави достъп до вашите Git хранилища, в едно с предимствата и недостатъците им.
